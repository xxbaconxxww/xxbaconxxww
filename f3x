-- // GUI TO LUA \\ --

-- // INSTANCES: 18 | SCRIPTS: 3 | MODULES: 0 \\ --

local UI = {}

-- // StarterGui.Btools \\ --
UI["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"))
UI["1"]["Name"] = [[Btools]]
UI["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling
UI["1"]["ResetOnSpawn"] = false

-- // StarterGui.Btools.Frame \\ --
UI["2"] = Instance.new("Frame", UI["1"])
UI["2"]["BorderSizePixel"] = 0
UI["2"]["BackgroundColor3"] = Color3.fromRGB(51, 51, 51)
UI["2"]["Size"] = UDim2.new(0.35208, 0, 0.4984, 0)
UI["2"]["Position"] = UDim2.new(0.47919, 0, 0.22436, 0)
UI["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["2"]["BackgroundTransparency"] = 0.25

-- // StarterGui.Btools.Frame.CButton \\ --
UI["3"] = Instance.new("TextButton", UI["2"])
UI["3"]["BorderSizePixel"] = 0
UI["3"]["TextSize"] = 30
UI["3"]["TextColor3"] = Color3.fromRGB(255, 255, 255)
UI["3"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30)
UI["3"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
UI["3"]["Size"] = UDim2.new(0.33546, 0, 0.13183, 0)
UI["3"]["BackgroundTransparency"] = 0.25
UI["3"]["Name"] = [[CButton]]
UI["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["3"]["Text"] = [[Clone]]
UI["3"]["Position"] = UDim2.new(0.03104, 0, 0.10442, 0)

-- // StarterGui.Btools.Frame.CButton.UICorner \\ --
UI["4"] = Instance.new("UICorner", UI["3"])


-- // StarterGui.Btools.Frame.TextBox1 \\ --
UI["5"] = Instance.new("TextBox", UI["2"])
UI["5"]["CursorPosition"] = -1
UI["5"]["TextColor3"] = Color3.fromRGB(0, 0, 0)
UI["5"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179)
UI["5"]["BorderSizePixel"] = 0
UI["5"]["TextSize"] = 30
UI["5"]["Name"] = [[TextBox1]]
UI["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255)
UI["5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
UI["5"]["PlaceholderText"] = [[Instance]]
UI["5"]["Size"] = UDim2.new(0.33546, 0, 0.13183, 0)
UI["5"]["Position"] = UDim2.new(0.41133, 0, 0.10442, 0)
UI["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["5"]["Text"] = [[]]
UI["5"]["BackgroundTransparency"] = 0.25

-- // StarterGui.Btools.Frame.TextBox1.UICorner \\ --
UI["6"] = Instance.new("UICorner", UI["5"])


-- // StarterGui.Btools.Frame.Dragify \\ --
UI["7"] = Instance.new("LocalScript", UI["2"])
UI["7"]["Name"] = [[Dragify]]

-- // StarterGui.Btools.Frame.LockAll \\ --
UI["8"] = Instance.new("TextButton", UI["2"])
UI["8"]["BorderSizePixel"] = 0
UI["8"]["TextSize"] = 30
UI["8"]["TextColor3"] = Color3.fromRGB(255, 255, 255)
UI["8"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30)
UI["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
UI["8"]["Size"] = UDim2.new(0.33546, 0, 0.13183, 0)
UI["8"]["BackgroundTransparency"] = 0.25
UI["8"]["Name"] = [[LockAll]]
UI["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["8"]["Text"] = [[LockAll]]
UI["8"]["Position"] = UDim2.new(0.03104, 0, 0.29092, 0)

-- // StarterGui.Btools.Frame.LockAll.UICorner \\ --
UI["9"] = Instance.new("UICorner", UI["8"])


-- // StarterGui.Btools.Frame.UnlockAll \\ --
UI["a"] = Instance.new("TextButton", UI["2"])
UI["a"]["BorderSizePixel"] = 0
UI["a"]["TextSize"] = 30
UI["a"]["TextColor3"] = Color3.fromRGB(255, 255, 255)
UI["a"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30)
UI["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
UI["a"]["Size"] = UDim2.new(0.33546, 0, 0.13183, 0)
UI["a"]["BackgroundTransparency"] = 0.25
UI["a"]["Name"] = [[UnlockAll]]
UI["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["a"]["Text"] = [[UnlockAll]]
UI["a"]["Position"] = UDim2.new(0.41318, 0, 0.29092, 0)

-- // StarterGui.Btools.Frame.UnlockAll.UICorner \\ --
UI["b"] = Instance.new("UICorner", UI["a"])


-- // StarterGui.Btools.Frame.UICorner \\ --
UI["c"] = Instance.new("UICorner", UI["2"])


-- // StarterGui.Btools.Frame.LocalScript \\ --
UI["d"] = Instance.new("LocalScript", UI["2"])


-- // StarterGui.Btools.Frame.TextBox \\ --
UI["e"] = Instance.new("TextBox", UI["2"])
UI["e"]["TextColor3"] = Color3.fromRGB(0, 0, 0)
UI["e"]["BorderSizePixel"] = 0
UI["e"]["TextSize"] = 30
UI["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255)
UI["e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
UI["e"]["PlaceholderText"] = [[Num]]
UI["e"]["Size"] = UDim2.new(0.17572, 0, 0.13183, 0)
UI["e"]["Position"] = UDim2.new(0.79791, 0, 0.10121, 0)
UI["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["e"]["Text"] = [[]]
UI["e"]["BackgroundTransparency"] = 0.25

-- // StarterGui.Btools.Frame.TextBox.UICorner \\ --
UI["f"] = Instance.new("UICorner", UI["e"])


-- // StarterGui.Btools.LocalScript \\ --
UI["10"] = Instance.new("LocalScript", UI["1"])


-- // StarterGui.Btools.TextButton \\ --
UI["11"] = Instance.new("TextButton", UI["1"])
UI["11"]["BorderSizePixel"] = 0
UI["11"]["TextSize"] = 14
UI["11"]["TextColor3"] = Color3.fromRGB(0, 0, 0)
UI["11"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255)
UI["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
UI["11"]["Size"] = UDim2.new(0.07199, 0, 0.09615, 0)
UI["11"]["BorderColor3"] = Color3.fromRGB(0, 0, 0)
UI["11"]["Position"] = UDim2.new(0.02025, 0, 0.27083, 0)

-- // StarterGui.Btools.TextButton.UICorner \\ --
UI["12"] = Instance.new("UICorner", UI["11"])


-- // StarterGui.Btools.Frame.Dragify \\ --
local function SCRIPT_7()
local script = UI["7"]
	local UserInputService = game:GetService("UserInputService")
	
	local gui = script.Parent
	
	local dragging
	local dragInput
	local dragStart
	local startPos
	
	local function update(input)
		local delta = input.Position - dragStart
		gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
	
	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position
	
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end
task.spawn(SCRIPT_7)
-- // StarterGui.Btools.Frame.LocalScript \\ --
local function SCRIPT_d()
local script = UI["d"]
	game.TextChatService.TextChannels.RBXSystem:DisplaySystemMessage("Started")
	local TextBox = script.Parent.TextBox
	local TextBox1 = script.Parent.TextBox1
	local player = game.Players.LocalPlayer
	local char = player.Character
	local u = game:GetService("UserInputService")
	local tool
	
	for i,v in player:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	for i,v in game.ReplicatedStorage:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	for i,v in player:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	local hdadminclient = game.ReplicatedStorage:FindFirstChild("HDAdminClient")
	
Instance.new("Highlight",tool)
game.TextChatService.TextChannels.RBXSystem:DisplaySystemMessage("Tool = "..tool.Name)	tool:GetPropertyChangedSignal("Parent"):Connect(function()
		if hdadminclient then
	wait(3)		hdadminclient.Signals.RequestCommand:InvokeServer(";btools")
		end
		if not tool.Parent then
			while not tool.Parent do
				print(tool.Parent)
				if not tool.Parent then
					print("FINDING TOOL")
					for i,v in player:GetDescendants() do
						if v.Name == "SyncAPI" then
							tool = v.Parent
						end
					end
					if tool.Parent then print("TOOL FOUND",tool) end
				end
				
				if not tool.Parent then
					for i,v in char:GetDescendants() do
						if v.Name == "SyncAPI" then
							tool = v.Parent
						end
					end
					if tool.Parent then print("TOOL FOUND",tool) end
				end	
	
				if not tool.Parent then
					for i,v in game.ReplicatedStorage:GetDescendants() do
						if v:IsA("RemoteFunction") then
							tool = v.Parent
						end
					end
				if tool.Parent then print("TOOL FOUND",tool)  else warn("TOOL NOT FOUND") end
				end
			end
		end
	end)
	
	function _(args)
		remote = tool.SyncAPI.ServerEndpoint
		remote:InvokeServer(unpack(args))
	end
	function SetCollision(part,boolean)
		local args = {
			[1] = "SyncCollision",
			[2] = {
				[1] = {
					["Part"] = part,
					["CanCollide"] = boolean
				}
			}
		}
		_(args)
	end
	
	function SetAnchor(boolean,part)
		local args = {
			[1] = "SyncAnchor",
			[2] = {
				[1] = {
					["Part"] = part,
					["Anchored"] = boolean
				}
			}
		}
		_(args)
	end
	
	function AddClone(part,mods)
		local args = {
			[1] = "Clone",
			[2] = {
				["Part"] = part
			},
			[3] = workspace
		}
		_(args)
	end
	
	function CreatePart(cf,parent)
		local args = {
			[1] = "CreatePart",
			[2] = "Normal",
			[3] = cf,
			[4] = parent
		}
		_(args)
	end
	function DestroyPart(part)
		local args = {
			[1] = "Remove",
			[2] = {
				[1] = part
			}
		}
		_(args)
	end
	function MovePart(part,cf)
		local args = {
			[1] = "SyncMove",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf
				}
			}
		}
		_(args)
	end
	function Resize(part,size,cf)
		local args = {
			[1] = "SyncResize",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf,
					["Size"] = size
				}
			}
		}
		_(args)
	end
	function AddMesh(part)
		local args = {
			[1] = "CreateMeshes",
			[2] = {
				[1] = {
					["Part"] = part
				}
			}
		}
		_(args)
	end
	
	function SetMesh(part,meshid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["MeshId"] = "rbxassetid://"..meshid
				}
			}
		}
		_(args)
	end
	function SetTexture(part, texid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["TextureId"] = "rbxassetid://"..texid
				}
			}
		}
		_(args)
	end
	function SetName(part, stringg)
		local args = {
			[1] = "SetName",
			[2] = {
				[1] = part
			},
			[3] = stringg
		}
	
		_(args)
	end
	function MeshResize(part,size)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["Scale"] = size
				}
			}
		}
		_(args)
	end
	function Weld(part1, part2,lead)
		local args = {
			[1] = "CreateWelds",
			[2] = {
				[1] = part1,
				[2] = part2
			},
			[3] = lead
		}
		_(args)
	
	end
	function SetLocked(part,boolean)
		local args = {
			[1] = "SetLocked",
			[2] = {
				[1] = part
			},
			[3] = boolean
		}
		_(args)
	end
	function SetTrans(part,int)
		local args = {
			[1] = "SyncMaterial",
			[2] = {
				[1] = {
					["Part"] = part,
					["Transparency"] = int
				}
			}
		}
		_(args)
	end
	function CreateSpotlight(part)
		local args = {
			[1] = "CreateLights",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight"
				}
			}
		}
		_(args)
	end
	function SyncLighting(part,brightness)
		local args = {
			[1] = "SyncLighting",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight",
					["Brightness"] = brightness
				}
			}
		}
		_(args)
	end
	function Color(part,color)
		local args = {
			[1] = "SyncColor",
			[2] = {
				[1] = {
					["Part"] = part,
					["Color"] = color --[[Color3]],
					["UnionColoring"] = false
				}
			}
		}
		_(args)
	end
	function SpawnDecal(part,side)
		local args = {
			[1] = "CreateTextures",
			[2] = {
				[1] = {
					["Part"] = part,
					["Face"] = side,
					["TextureType"] = "Decal"
				}
			}
		}
	
		_(args)
	end
	function AddDecal(part,asset,side)
		local args = {
			[1] = "SyncTexture",
			[2] = {
				[1] = {
					["Part"] = part,
					["Face"] = side,
					["TextureType"] = "Decal",
					["Texture"] = "rbxassetid://".. asset
				}
			}
		}
		_(args)
	end
	--[[
	function Sky(id)
		e = char.HumanoidRootPart.CFrame.x
		f = char.HumanoidRootPart.CFrame.y
		g = char.HumanoidRootPart.CFrame.z
		CreatePart(CFrame.new(math.floor(e),math.floor(f),math.floor(g)) + Vector3.new(0,6,0),workspace)
		for i,v in game.Workspace:GetDescendants() do
			if v:IsA("BasePart") and v.CFrame.x == math.floor(e) and v.CFrame.z == math.floor(g) then
				--spawn(function()
				SetName(v,"Sky")
				AddMesh(v)
				--end)
				--spawn(function()
				SetMesh(v,"8006679977")
				SetTexture(v,id)
				--end)
				MeshResize(v,Vector3.new(50,50,50))
				SetLocked(v,true)
			end
		end
	end
	Sky("15913000160")
	--]]
	-----------------------------------
	
	local player = game.Players.LocalPlayer
	local char = player.Character
	local tool
	for i,v in player:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	for i,v in game.ReplicatedStorage:GetDescendants() do
		if v.Name == "SyncAPI" then
			tool = v.Parent
		end
	end
	--craaa
	
	function SetCollision(part,boolean)
		local args = {
			[1] = "SyncCollision",
			[2] = {
				[1] = {
					["Part"] = part,
					["CanCollide"] = boolean
				}
			}
		}
		_(args)
	end
	function SetAnchor(boolean,part)
		local args = {
			[1] = "SyncAnchor",
			[2] = {
				[1] = {
					["Part"] = part,
					["Anchored"] = boolean
				}
			}
		}
		_(args)
	end
	function CreatePart(cf,parent)
		local args = {
			[1] = "CreatePart",
			[2] = "Normal",
			[3] = cf,
			[4] = parent
		}
		_(args)
	end
	function DestroyPart(part)
		local args = {
			[1] = "Remove",
			[2] = {
				[1] = part
			}
		}
		_(args)
	end
	function MovePart(part,cf)
		local args = {
			[1] = "SyncMove",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf
				}
			}
		}
		_(args)
	end
	function Resize(part,size,cf)
		local args = {
			[1] = "SyncResize",
			[2] = {
				[1] = {
					["Part"] = part,
					["CFrame"] = cf,
					["Size"] = size
				}
			}
		}
		_(args)
	end
	function AddMesh(part)
		local args = {
			[1] = "CreateMeshes",
			[2] = {
				[1] = {
					["Part"] = part
				}
			}
		}
		_(args)
	end
	
	function SetMesh(part,meshid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["MeshId"] = "rbxassetid://"..meshid
				}
			}
		}
		_(args)
	end
	function SetTexture(part, texid)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["TextureId"] = "rbxassetid://"..texid
				}
			}
		}
		_(args)
	end
	function SetName(part, stringg)
		local args = {
			[1] = "SetName",
			[2] = {
				[1] = part
			},
			[3] = stringg
		}
	
		_(args)
	end
	function MeshResize(part,size)
		local args = {
			[1] = "SyncMesh",
			[2] = {
				[1] = {
					["Part"] = part,
					["Scale"] = size
				}
			}
		}
		_(args)
	end
	function Weld(part1, part2,lead)
		local args = {
			[1] = "CreateWelds",
			[2] = {
				[1] = part1,
				[2] = part2
			},
			[3] = lead
		}
		_(args)
	
	end
	
	function SetTrans(part,int)
		local args = {
			[1] = "SyncMaterial",
			[2] = {
				[1] = {
					["Part"] = part,
					["Transparency"] = int
				}
			}
		}
		_(args)
	end
	function CreateSpotlight(part)
		local args = {
			[1] = "CreateLights",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight"
				}
			}
		}
		_(args)
	end
	function SyncLighting(part,brightness)
		local args = {
			[1] = "SyncLighting",
			[2] = {
				[1] = {
					["Part"] = part,
					["LightType"] = "SpotLight",
					["Brightness"] = brightness
				}
			}
		}
		_(args)
	end
	function Color(part,color)
		local args = {
			[1] = "SyncColor",
			[2] = {
				[1] = {
					["Part"] = part,
					["Color"] = color --[[Color3]],
					["UnionColoring"] = false
				}
			}
		}
		_(args)
	end
	function SpawnDecal(part,side)
		local args = {
			[1] = "CreateTextures",
			[2] = {
				[1] = {
					["Part"] = part,
					["Face"] = side,
					["TextureType"] = "Decal"
				}
			}
		}
	
		_(args)
	end
	function AddDecal(part,asset,side)
		local args = {
			[1] = "SyncTexture",
			[2] = {
				[1] = {
					["Part"] = part,
					["Face"] = side,
					["TextureType"] = "Decal",
					["Texture"] = "rbxassetid://".. asset
				}
			}
		}
		_(args)
	end
	
	function AddClone2(PartTable)
		local args = {
			[1] = "Clone",
			[2] = PartTable,
			[3] = workspace
		}
		_(args)
	end
	
	
	--[[
	function AddClone(part,mods)
		local args = {
			[1] = "Clone",
			[2] = {
				["Part"] = part
			},
			[3] = workspace
		}
		_(args)
	end
	--]]
	function SetLocked2(part,boolean)
		local args = {
			[1] = "SetLocked",
			[2] = {
				part
			},
			[3] = boolean
		}
		_(args)
	end
	
	poor = ""
	script.Parent.LockAll.MouseButton1Down:Connect(function()
		for i,v in game.Workspace:GetDescendants() do
			if v:IsA("BasePart") then
				SetLocked(v,true)
				poor = v
			end
		end
		game.TextChatService.TextChannels.RBXSystem:DisplaySystemMessage("Locked "..tostring(poor.Locked))
	end)
	script.Parent.UnlockAll.MouseButton1Down:Connect(function()
		for i,v in game.Workspace:GetDescendants() do
			if v:IsA("BasePart") then
				SetLocked(v,false)
				poor = v
			end
		end
		game.TextChatService.TextChannels.RBXSystem:DisplaySystemMessage("Unlocked "..tostring(not poor.Locked))
	end)
	local toilet = workspace.Skeleton
	script.Parent.CButton.MouseButton1Down:Connect(function()
		local mods = {}
	local toilet = workspace:FindFirstChild(TextBox1.Text)
		for i = 1, tonumber(TextBox.Text) or 1 do
			table.insert(mods,toilet)
		end
		AddClone2(mods)
	end)
	
end
task.spawn(SCRIPT_d)
-- // StarterGui.Btools.LocalScript \\ --
local function SCRIPT_10()
local script = UI["10"]
	script.Parent.TextButton.MouseButton1Down:Connect(function()
		script.Parent.Frame.Visible = not script.Parent.Frame.Visible
	end)
	local TextBox = script.Parent.Frame.TextBox
	TextBox:GetPropertyChangedSignal("Text"):Connect(function()
		TextBox.Text = TextBox.Text:gsub('%D+', '');
	end)
	
end
task.spawn(SCRIPT_10)
local b = {[1]={decal={transparency=0.800000011920929;face=Enum.NormalId.Top;texture="rbxassetid://6372755229";};
surface={Top="Smooth";Front="Smooth";Bottom="Smooth";Right="Smooth";Left="Smooth";Back="Smooth";};
reflectance=0;color={[1]=91.00000217556953;[2]=91.00000217556953;[3]=91.00000217556953;};
anchored=true;cancollide=true;transparency=0;texture="Plastic";position={[1]=0;[2]=-8;[3]=0;};
locked=true;cframe={[1]=0;[2]=-8;[3]=0;[4]=1;[5]=0;[6]=0;[7]=0;[8]=1;[9]=0;[10]=0;[11]=0;[12]=1;};
shape="Block";size={[1]=2048;[2]=16;[3]=2048;};
};
}
remote = tool.SyncAPI.ServerEndpoint
remote:InvokeServer(b)
return UI["1"], require;
